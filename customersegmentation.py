# -*- coding: utf-8 -*-
"""CustomerSegmentation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1whJCmdwteYvZFYCB6Uy7qWbTgB2pcsLr
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv("/content/Customers.csv")
df.head()

df.shape

df.describe()

df.dtypes

df.isnull().sum()

df.drop(["CustomerID"],axis=1,inplace=True)

df.head()

# distribution plot of age, income and spending score 
plt.figure(1, figsize=(15,6))
n=0
for x in ['Age','Annual Income (k$)','Spending Score (1-100)']:
  n=n+1
  plt.subplot(1, 3, n)
  plt.subplots_adjust(hspace=0.5,wspace=0.5)
  sns.distplot(df[x], bins=20)
  plt.title("Distplot of {}".format(x))
plt.show()

plt.figure(figsize=(15,5))
sns.countplot(y="Gender",data=df)
plt.show()

# distribution plot of age, income and spending score 
plt.figure(1, figsize=(15,7))
n=0
for cols in ['Age','Annual Income (k$)','Spending Score (1-100)']:
  n=n+1
  plt.subplot(1, 3, n)
  sns.set(style="whitegrid")
  plt.subplots_adjust(hspace=0.5,wspace=0.5)
  sns.violinplot(x=cols,y='Gender', data=df)
  plt.ylabel('Gender' if n==1 else "")
  plt.title('Violin Plot')
plt.show()

age_18_25=df.Age[(df.Age>=18) & (df.Age<=25)]
age_26_35=df.Age[(df.Age>=26) & (df.Age<=35)]
age_36_45=df.Age[(df.Age>=36) & (df.Age<=45)]
age_46_55=df.Age[(df.Age>=46) & (df.Age<=55)]
age_55above=df.Age[df.Age>=56]

agex=["18-25","25-35","36-45","46-55","55+"]
agey=[len(age_18_25.values),len(age_26_35.values),len(age_36_45.values),len(age_46_55.values), len(age_55above.values)]

plt.figure(figsize=(15,6))
sns.barplot(x=agex, y=agey, palette='pastel')
plt.title("Customer and Age")
plt.xlabel("Age")
plt.ylabel("Number of Customers")
plt.show()

ss_1_20=df["Spending Score (1-100)"][(df["Spending Score (1-100)"]>=1) & (df["Spending Score (1-100)"]<=20)]
ss_21_40=df["Spending Score (1-100)"][(df["Spending Score (1-100)"]>=21) & (df["Spending Score (1-100)"]<=40)]
ss_41_60=df["Spending Score (1-100)"][(df["Spending Score (1-100)"]>=41) & (df["Spending Score (1-100)"]<=60)]
ss_61_80=df["Spending Score (1-100)"][(df["Spending Score (1-100)"]>=61) & (df["Spending Score (1-100)"]<=80)]
ss_81_100=df["Spending Score (1-100)"][(df["Spending Score (1-100)"]>=81) & (df["Spending Score (1-100)"]<=100)]

ssx=["1-20","21-40","41-60","61-80","81-100"]
ssy=[len(ss_1_20.values),len(ss_21_40.values),len(ss_41_60.values),len(ss_61_80.values), len(ss_81_100.values)]

plt.figure(figsize=(15,6))
sns.barplot(x=ssx, y=ssy, palette='pastel')
plt.title("Spending scores")
plt.xlabel("Score")
plt.ylabel("Number of Customers with that score")
plt.show()

X1=df.loc[:,["Age","Spending Score (1-100)"]].values

from sklearn.cluster import KMeans

# finding wcss value for different number of clusters

wcss = []

for k in range(1,11):
  kmeans = KMeans(n_clusters=k, init='k-means++')
  kmeans.fit(X1)
  wcss.append(kmeans.inertia_)

#Plot an elbow graph
plt.figure(figsize=(12,6))
plt.grid()
plt.plot(range(1,11),wcss, linewidth=2, color="blue",marker = "8")
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.show()

kmeans = KMeans(n_clusters=4, init='k-means++', random_state=0)

# return a label for each data point based on their cluster
Y = kmeans.fit_predict(X1)

print(Y)

# To see centroid
print(kmeans.cluster_centers_)

# plotting all the clusters and their Centroids

plt.figure(figsize=(8,8))
plt.scatter(X1[Y==0,0], X1[Y==0,1], s=50, c='green', label='Cluster 1')
plt.scatter(X1[Y==1,0], X1[Y==1,1], s=50, c='red', label='Cluster 2')
plt.scatter(X1[Y==2,0], X1[Y==2,1], s=50, c='yellow', label='Cluster 3')
plt.scatter(X1[Y==3,0], X1[Y==3,1], s=50, c='violet', label='Cluster 4')
plt.scatter(X1[Y==4,0], X1[Y==4,1], s=50, c='blue', label='Cluster 5')

# plot the centroids
plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], s=100, c='black', label='Centroids')

plt.title('Customer Groups')
plt.xlabel('Age')
plt.ylabel('Spending Score')
plt.show()

X2=df.loc[:,["Annual Income (k$)","Spending Score (1-100)"]].values
from sklearn.cluster import KMeans
# finding wcss value for different number of clusters

wcss = []

for k in range(1,11):
  kmeans = KMeans(n_clusters=k, init='k-means++')
  kmeans.fit(X1)
  wcss.append(kmeans.inertia_)
  
#Plot an elbow graph
plt.figure(figsize=(12,6))
plt.grid()
plt.plot(range(1,11),wcss, linewidth=2, color="blue",marker = "8")
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.show()

kmeans = KMeans(n_clusters=5, init='k-means++', random_state=0)

# return a label for each data point based on their cluster
Y = kmeans.fit_predict(X2)

print(Y)

# To see centroid
print(kmeans.cluster_centers_)

# plotting all the clusters and their Centroids

plt.figure(figsize=(8,8))
plt.scatter(X2[Y==0,0], X2[Y==0,1], s=50, c='green', label='Cluster 1')
plt.scatter(X2[Y==1,0], X2[Y==1,1], s=50, c='red', label='Cluster 2')
plt.scatter(X2[Y==2,0], X2[Y==2,1], s=50, c='yellow', label='Cluster 3')
plt.scatter(X2[Y==3,0], X2[Y==3,1], s=50, c='violet', label='Cluster 4')
plt.scatter(X2[Y==4,0], X2[Y==4,1], s=50, c='blue', label='Cluster 5')

# plot the centroids
plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], s=100, c='black', label='Centroids')

plt.title('Customer Groups')
plt.xlabel('Annual Income')
plt.ylabel('Spending Score')
plt.show()

#consider all the variables together
X3=df.iloc[:,1:]
wcss = []
wcss = []

for k in range(1,11):
  kmeans = KMeans(n_clusters=k, init='k-means++')
  kmeans.fit(X3)
  wcss.append(kmeans.inertia_)
  
#Plot an elbow graph
plt.figure(figsize=(12,6))
plt.grid()
plt.plot(range(1,11),wcss, linewidth=2, color="blue",marker = "8")
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.show()

kmeans = KMeans(n_clusters=6, init='k-means++', random_state=0)

# return a label for each data point based on their cluster
Y = kmeans.fit_predict(X2)

print(Y)

print(kmeans.cluster_centers_)

# Plot 3d graph coz 3 variables
clusters=kmeans.fit_predict(X3)
df['label']=clusters

from mpl_toolkits.mplot3d import Axes3D
fig=plt.figure(figsize=(20,10))
ax=fig.add_subplot(111, projection='3d')
ax.scatter(df.Age[df.label==0],df["Annual Income (k$)"][df.label==0],df["Spending Score (1-100)"][df.label==0], c='blue',s=60)
ax.scatter(df.Age[df.label==1],df["Annual Income (k$)"][df.label==1],df["Spending Score (1-100)"][df.label==1], c='red',s=60)
ax.scatter(df.Age[df.label==2],df["Annual Income (k$)"][df.label==2],df["Spending Score (1-100)"][df.label==2], c='green',s=60)
ax.scatter(df.Age[df.label==3],df["Annual Income (k$)"][df.label==3],df["Spending Score (1-100)"][df.label==3], c='orange',s=60)
ax.scatter(df.Age[df.label==4],df["Annual Income (k$)"][df.label==4],df["Spending Score (1-100)"][df.label==4], c='yellow',s=60)

